version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        BUILD_DATABASE_URL: postgresql://ufo_user:${POSTGRES_PASSWORD}@database:5432/ufo_timeline
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://ufo_user:${POSTGRES_PASSWORD}@database:5432/ufo_timeline
      - JWT_SECRET=${JWT_SECRET}
      - NEXTAUTH_SECRET=${JWT_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ufo-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  database:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ufo_timeline
      - POSTGRES_USER=ufo_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ufo_user -d ufo_timeline"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ufo-network

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - ufo-network

volumes:
  postgres_data:
    driver: local

networks:
  ufo-network:
    driver: bridge